[{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"`RLumCarlo': Tedious features - fine examples","text":"`RLumCarlo’ collection energy-band models simulate luminescence signals dosimetric materials using Monte-Carlo (MC) methods various stimulation modes. document aims supplementing package documentation elaborating package examples.","code":""},{"path":[]},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"overview","dir":"Articles","previous_headings":"The models in `RLumCarlo’","what":"Overview","title":"`RLumCarlo': Tedious features - fine examples","text":"table column headers refer stimulation modes, infrared stimulated luminescence (IRSL), optically stimulated luminescence (OSL), LM-OSL (Bulur 1996), thermally stimulated luminescence (short: TL). column `BASE MODEL’ OTOR refers `One Trap-One Recombination Centre’, GOT `General One Trap’, LTM `Localized Transition Model’ (Jain et al. 2012; Pagonis et al. 2019). general overview refer excellent book Chen Pagonis (2011).","code":""},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"where-to-find-them","dir":"Articles","previous_headings":"The models in `RLumCarlo’","what":"Where to find them","title":"`RLumCarlo': Tedious features - fine examples","text":"following table lists models implemented `RLumCarlo’ along R function call corresponding R (*.R) C++ (*.cpp) files. modelling takes place C++ functions wrapped R functions similar name. , however, want cross-check code, inspect files ending .cpp. model run calling one R functions starting run_. Currently, three different model types (TUN: tunnelling, LOC: localised transition, DELOC: delocalised transition) implemented stimulation types TL, IRSL, LM-OSL, ISO (isothermal). Please note model different parameters requirements.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"rlumcarlo-model-parameters-and-variables","dir":"Articles","previous_headings":"","what":"`RLumCarlo’ model parameters and variables","title":"`RLumCarlo': Tedious features - fine examples","text":"following table summarises parameters used implemented MC models along physical meaning, units range realistic values. range represents just rough guideline might exceeded particular cases.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"`RLumCarlo': Tedious features - fine examples","text":"following examples illustrate capacity `RLumCarlo’, using code-snippets deploying longer simulation times allowed standard package examples, aim functionality test.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"example-1-a-first-example","dir":"Articles","previous_headings":"Examples","what":"Example 1: A first example","title":"`RLumCarlo': Tedious features - fine examples","text":"first example iso-thermal decay curve using tunnelling model (models work similarly). Returned either simulated signal estimated remaining trapped charge carriers. Function plot_RLumCarlo() provides easy way visualise modelling results called using tee operator %T> package magrittr (imported `RLumCarlo’). Simulation results stored object results , time, piped function plot_RLumCarlo() output visualisation.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"model-the-signal","dir":"Articles","previous_headings":"Examples > Example 1: A first example","what":"Model the signal","title":"`RLumCarlo': Tedious features - fine examples","text":"obvious modelling output luminescence signal , example simulates iso-thermal (ITL) signal temperature (T) 200 °C 5,000 s using tunnelling transition model. Trap parameters E=1.2E = 1.2 eV trap depth frequency factor 1×10101\\times10^{10} (1/s). parameter rho (ρ′\\rho') defines recombination centre density. example N_e scalar, means clusters start number electrons (200). However, `RLumCarlo’ supports different starting conditions regard initial number electrons. example, one assume number initial electrons vary randomly 190 210. situation created next example. Generally, `RLumCarlo’ supports input parameters N_e n_filled.","code":"results <- run_MC_ISO_TUN(   E = 1.2,   s = 1e10,   T = 200,   N_e = 200,   rho = 0.007,   clusters = 10,   times = seq(0, 5000) ) %T>%   plot_RLumCarlo(norm = TRUE,                  legend = TRUE,                  main = \"Iso-thermal decay (TUN)\") results <- run_MC_ISO_TUN(   E = 1.2,   s = 1e10,   T = 200,   N_e = sample(190:210,10,TRUE),   rho = 0.007,   clusters = 10,   times = seq(0, 5000) ) %T>%   plot_RLumCarlo(norm = TRUE,                  legend = TRUE,                  main = \"Iso-thermal decay (TUN) for varying N_e\")"},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"model-remaining-charges","dir":"Articles","previous_headings":"Examples > Example 1: A first example","what":"Model remaining charges","title":"`RLumCarlo': Tedious features - fine examples","text":"first example can slightly altered provide alternative insight. Instead luminescence signal, variant returns number remaining electrons trap.","code":"results <- run_MC_ISO_TUN(   E = 1.2,   s = 1e10,   T = 200,   rho = 0.007,   times = seq(0, 5000),    output = \"remaining_e\" ) %T>%   plot_RLumCarlo(     legend = TRUE,     ylab = \"Remaining electrons\"     )"},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"understanding-the-numerical-output","dir":"Articles","previous_headings":"Examples > Example 1: A first example","what":"Understanding the numerical output","title":"`RLumCarlo': Tedious features - fine examples","text":"cases modelling output object class RLumCarlo_Model_Output, basically list consisting array numeric (vector). represents full modelling output results, interpretation might less straight forward, user may want condense information via summary(). function summary() also used internally function plot_RLumCarlo() simplify data plotted. call summarises modelling results returns terminal output data.frame , e.g., mean standard deviation, can used create plots insight. instance, stimulation time coefficient variation (CV %):","code":"str(results) ## List of 2 ##  $ signal: num [1:5001, 1:21, 1:10] 200 200 200 200 200 200 200 200 200 200 ... ##   ..- attr(*, \"dimnames\")=List of 3 ##   .. ..$ : NULL ##   .. ..$ : NULL ##   .. ..$ : NULL ##  $ time  : int [1:5001] 0 1 2 3 4 5 6 7 8 9 ... ##  - attr(*, \"class\")= chr \"RLumCarlo_Model_Output\" ##  - attr(*, \"model\")= chr \"run_MC_ISO_TUN\" df <- summary(results) ##       time           mean          y_min          y_max            sd        ##  Min.   :   0   Min.   :3062   Min.   :3029   Min.   :3084   Min.   : 1.16   ##  1st Qu.:1250   1st Qu.:3173   1st Qu.:3148   1st Qu.:3202   1st Qu.:12.46   ##  Median :2500   Median :3331   Median :3312   Median :3358   Median :15.69   ##  Mean   :2500   Mean   :3414   Mean   :3392   Mean   :3438   Mean   :15.03   ##  3rd Qu.:3750   3rd Qu.:3591   3rd Qu.:3573   3rd Qu.:3628   3rd Qu.:17.81   ##  Max.   :5000   Max.   :4199   Max.   :4197   Max.   :4200   Max.   :20.69   ##       var               sum        ##  Min.   :  1.344   Min.   :30616   ##  1st Qu.:155.156   1st Qu.:31733   ##  Median :246.233   Median :33308   ##  Mean   :237.984   Mean   :34140   ##  3rd Qu.:317.067   3rd Qu.:35906   ##  Max.   :428.100   Max.   :41987 head(df) ##   time   mean y_min y_max       sd      var   sum ## 1    0 4198.7  4197  4200 1.159502 1.344444 41987 ## 2    1 4198.2  4196  4200 1.549193 2.400000 41982 ## 3    2 4196.9  4194  4200 2.131770 4.544444 41969 ## 4    3 4196.6  4194  4200 2.118700 4.488889 41966 ## 5    4 4195.9  4193  4200 2.514403 6.322222 41959 ## 6    5 4195.1  4191  4200 2.514403 6.322222 41951 plot(   x = df$time,   y = (df$sd / df$mean) * 100,   pch = 20,    col = rgb(0,0,0,.1),   xlab = \"Stimulation time [s]\",   ylab = \"CV [%]\" )"},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"example-2-combining-two-plots","dir":"Articles","previous_headings":"Examples","what":"Example 2: Combining two plots","title":"`RLumCarlo': Tedious features - fine examples","text":"following examples use tunnelling model continuous wave (CW) infrared light stimulation (IRSL), combine two plots one single plot window.","code":"## set time vector  times <- seq(0, 1000)  ## Run MC simulation run_MC_CW_IRSL_TUN(A = 0.12, rho = 0.003, times = times) %>%   plot_RLumCarlo(norm = TRUE, legend = TRUE)  run_MC_CW_IRSL_TUN(A = 0.21, rho = 0.003, times = times) %>%   plot_RLumCarlo(norm = TRUE, add = TRUE)"},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"example-3-testing-different-parameters","dir":"Articles","previous_headings":"Examples","what":"Example 3: Testing different parameters","title":"`RLumCarlo': Tedious features - fine examples","text":"example can extended test effect different parameters. Contrary example , results stored list plot_RLumCarlo() called one time iterate automatically results create combined plot. plot output can highly customised provide better visual experience, e.g., manual setting colours legend.","code":"s <- 3.5e12 rho <- 0.015 E <- 1.45 r_c <- c(0,0.7,0.77,0.86, 0.97) times <- seq(100, 450) # here time = temperature results <- lapply(r_c, function(x) {   run_MC_TL_TUN(     s = s,     E = E,     rho = rho,     r_c = x,     times = times   )    }) ## plot curves, but without legend plot_RLumCarlo(   object = results,    ylab = \"normalised TL signal\",   xlab = \"Temperature [\\u00b0C]\",    plot_uncertainty = \"range\",   col = khroma::colour(\"bright\")(length(r_c)),   legend = FALSE,   norm = TRUE )  ## add legend manually legend(   \"topleft\",   bty = \"n\",   legend = paste0(\"r_c: \", r_c),   lty = 1,   col = khroma::colour(\"bright\")(length(r_c)) )"},{"path":"https://r-lum.github.io/RLumCarlo/articles/RLumCarlo_-_Getting_started_with_RLumCarlo.html","id":"example-4-dosimetric-cluster-systems","dir":"Articles","previous_headings":"Examples","what":"Example 4: Dosimetric cluster systems","title":"`RLumCarlo': Tedious features - fine examples","text":"`RLumCarlo’ supports simulation cheap dosimetric cluster system spatial correlation. dosimetric cluster system can created function create_ClusterSystem(): result arbitrary dosimetric system randomly distributed clusters. Euclidean distance used group clusters (colour code). use system simulation, instead providing scalar input clusters, output create_ClusterSystem() can injected every run_MC function.  Please note: simulation dosimetric cluster system, meaning n_filled changes. Instead defining number electrons per cluster, becomes total number electrons system. Electrons distributed according grouping single clusters (colours three-dimensional scatter plot). Within one group, electrons distributed evenly.","code":"clusters <- create_ClusterSystem(n = 100, plot = TRUE) run_MC_TL_LOC(  s = 1e14,  E = 0.9,  times = 0:100,  b = 1,  n_filled = 1000,  method = \"seq\",  clusters = clusters,  r = 1) %>% plot_RLumCarlo()"},{"path":[]},{"path":"https://r-lum.github.io/RLumCarlo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Friedrich. Author, translator. Sebastian Kreutzer. Author, translator, maintainer. Vasilis Pagonis. Author. Christoph Schmidt. Author. Christian Laag. Contributor. Ena Rajovic. Contributor. Alex Roy Duncan. Contributor.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Friedrich J, Kreutzer S, Pagonis V, Schmidt C (2025). RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10, https://r-lum.github.io/RLumCarlo/. Kreutzer S, Friedrich J, Pagonis V, Laag C, Rajovic E, Schmidt C (2021). “RLumCarlo: Simulating Cold Light using Monte Carlo Methods.” R Journal, 13, 351–365. doi:10.32614/RJ-2021-043.","code":"@Manual{,   title = {RLumCarlo: Monte-Carlo Methods for Simulating Luminescence Phenomena},   author = {Johannes Friedrich and Sebastian Kreutzer and Vasilis Pagonis and Christoph Schmidt},   year = {2025},   note = {R package version 0.1.10},   url = {https://r-lum.github.io/RLumCarlo/}, } @Article{,   title = {RLumCarlo: Simulating Cold Light using Monte Carlo Methods},   author = {Sebastian Kreutzer and Johannes Friedrich and Vasilis Pagonis and Christian Laag and Ena Rajovic and Christoph Schmidt},   year = {2021},   journal = {The R Journal},   volume = {13},   pages = {351–365},   doi = {10.32614/RJ-2021-043}, }"},{"path":"https://r-lum.github.io/RLumCarlo/index.html","id":"rlumcarlo-","dir":"","previous_headings":"","what":"Monte-Carlo Methods for Simulating Luminescence Phenomena","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena","text":"R package RLumCarlo provides collection R functions modelling luminescence production isolators semiconductors various stimulation modes using Monte Carlo methods.","code":""},{"path":[]},{"path":"https://r-lum.github.io/RLumCarlo/index.html","id":"i-requirements","dir":"","previous_headings":"Installation","what":"i. Requirements","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena","text":"Depending OS please download install one following: Windows: Rtools (provided CRAN) macOS: Xcode (provided Apple) Linux: gcc often comes pre-installed distributions. gcc available, however, kindly refer exhaustive collection installation guides depending Linux distribution.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/index.html","id":"ii-install-the-package-from-github","dir":"","previous_headings":"Installation","what":"ii. Install the package from GitHub","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena","text":"","code":"if(!require(\"devtools\"))   install.packages(\"devtools\") devtools::install_github(\"R-Lum/RLumCarlo@master\")"},{"path":"https://r-lum.github.io/RLumCarlo/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena","text":"","code":"run_MC_CW_IRSL_TUN(A = 0.12, rho = 0.003, times = 0:1000) %>%      plot_RLumCarlo(norm = TRUE, legend = TRUE)"},{"path":[]},{"path":"https://r-lum.github.io/RLumCarlo/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena","text":"program free software: can redistribute /modify terms GNU General Public License published Free Software Foundation, either version 3 License, later version. program distributed hope useful, WITHOUT WARRANTY; without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE. See GNU General Public License details.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/index.html","id":"id_-funding","dir":"","previous_headings":"","what":"Funding","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena","text":"development RLumCarlo benefited support various funding bodies: initial work Johannes Friedrich, Sebastian Kreutzer Christoph Schmidt supported DFG (2015–2018, SCHM 3051/4-1, “Modelling quartz luminescence signal dynamics relevant dating dosimetry”, SCHM 3051/4-1). Later financial support secured project ‘ULTIMO: Unifying Luminescence Models quartz feldspar (German Academic Exchange Service) DAAD: Deutscher Akademischer Austauschdienst DAAD PPP USA 2018, ID: 57387041)’. work Sebastian Kreutzer maintainer package supported LabEx LaScArBx (ANR - n. ANR-10-LABX-52) 2017  2020, Sebastian Kreutzer received funding European Union’s Horizon 2020 research innovation programme Marie Skłodowska-Curie grant agreement 844457 (project: CREDit).","code":""},{"path":"https://r-lum.github.io/RLumCarlo/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena","text":"Luminescence RLumModel","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/RLumCarlo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte-Carlo Methods for Simulating Luminescence Phenomena.   — RLumCarlo-package","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena.   — RLumCarlo-package","text":"collection functions simulate luminescence production dosimetric materials using Monte-Carlo methods. Implemented models delocalised, localised tunnelling transitions. Supported stimulation modes TL, CW-OSL, LM-OSL, LM-IRSL, ITL (ISO-TL).","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/RLumCarlo-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena.   — RLumCarlo-package","text":"Funding development RLumCarlo benefited support various funding bodies: initial work Johannes Friedrich, Sebastian Kreutzer Christoph Schmidt supported Deutsche Forschungsgemeinschaft (DFG, 2015–2018, SCHM 3051/4-1, \"Modelling quartz luminescence signal dynamics relevant dating dosimetry\", SCHM 3051/4-1). Later work (2018-2019) secured project \"ULTIMO: Unifying Luminescence Models quartz feldspar DAAD: Deutscher Akademischer Austauschdienst (German Academic Exchange Service). Framework: DAAD PPP USA 2018, ID: 57387041. work Sebastian Kreutzer maintainer package supported LabEx LaScArBx (ANR - n. ANR-10-LABX-52) 2017 2019. 2020-2022, Sebastian Kreutzer received funding European Union’s Horizon 2020 research innovation programme Marie Skłodowska-Curie grant agreement 844457. 2023, work maintainer package Sebastian Kreutzer supported DFG Heisenberg programme (#505822867).","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/RLumCarlo-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena.   — RLumCarlo-package","text":"Kreutzer, S., Friedrich, J., Pagonis, V., Laag, C., Rajovic, E., Schmidt, C., 2021. RLumCarlo: Simulating Cold Light using Monte Carlo Methods. R Journal 13, 351–365. doi:10.32614/RJ-2021-043 Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R., Schmidt, C., 2019. Excited state luminescence signals random distribution defects - new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024","code":""},{"path":[]},{"path":"https://r-lum.github.io/RLumCarlo/reference/RLumCarlo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte-Carlo Methods for Simulating Luminescence Phenomena.   — RLumCarlo-package","text":"Johannes Friedrich, University Bayreuth (Germany),  Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)  Vasilis Pagonis, McDaniel College Westminster (MD, USA),  Christoph Schmidt, University Bayreuth (Germany),  Ena Rajovic, University Bayreuth (Germany),  Alex Roy Duncan, University Bayreuth (Germany),  Christian Laag, Institut de Physique du Globe de Paris, Université de Paris (France)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dosimetric cluster system — create_ClusterSystem","title":"Create dosimetric cluster system — create_ClusterSystem","text":"order allow interaction spatial correlation clusters RLumCarlo, first dosimetric system needs created three-dimensional space, purpose function.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dosimetric cluster system — create_ClusterSystem","text":"","code":"create_ClusterSystem(n = 100, h = 0.5, plot = FALSE, ...)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dosimetric cluster system — create_ClusterSystem","text":"n numeric (default): number clusters created arbitrary 3-dimensional cube. x, y, z  distances range 0 1. h numeric (default): numeric scalar cut cluster tree using stats::cutree. number must range 0 1. plot logical (default): enables/disables plot output ... arguments passed plot output","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dosimetric cluster system — create_ClusterSystem","text":"function returns list class RLumCarlo_clusters consisting numeric vector cluster groups matrix cluster positions arbitrary space. plot = TRUE system displayed using scatterplot3d::scatterplot3d","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Create dosimetric cluster system — create_ClusterSystem","text":"0.1.0","code":""},{"path":[]},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create dosimetric cluster system — create_ClusterSystem","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Create dosimetric cluster system — create_ClusterSystem","text":"Kreutzer, S., 2025. create_ClusterSystem(): Create dosimetric cluster system. Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/create_ClusterSystem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dosimetric cluster system — create_ClusterSystem","text":"","code":"create_ClusterSystem(n = 10, plot = TRUE)  #> $cl_groups #>  [1] 1 2 3 1 4 1 5 6 4 2 #>  #> $m #>                 x          y          z #>  [1,] 0.600760886 0.03424133 0.73531960 #>  [2,] 0.157208442 0.32038573 0.19595673 #>  [3,] 0.007399441 0.40232824 0.98053967 #>  [4,] 0.466393497 0.19566983 0.74152153 #>  [5,] 0.497777389 0.40353812 0.05144628 #>  [6,] 0.289767245 0.06366146 0.53021246 #>  [7,] 0.732881987 0.38870131 0.69582388 #>  [8,] 0.772521511 0.97554784 0.68855600 #>  [9,] 0.874600661 0.28989230 0.03123033 #> [10,] 0.174940627 0.67838043 0.22556253 #>  #> attr(,\"class\") #> [1] \"RLumCarlo_ClusterSystem\""},{"path":"https://r-lum.github.io/RLumCarlo/reference/methods_RLumCarlo.html","id":null,"dir":"Reference","previous_headings":"","what":"methods_RLumCarlo — methods_RLumCarlo","title":"methods_RLumCarlo — methods_RLumCarlo","text":"Methods S3-generics implemented package 'RLumCarlo'.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/methods_RLumCarlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"methods_RLumCarlo — methods_RLumCarlo","text":"","code":"# S3 method for class 'RLumCarlo_Model_Output' summary(object, verbose = TRUE, ...)  # S3 method for class 'RLumCarlo_Model_Output' c(...)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/methods_RLumCarlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"methods_RLumCarlo — methods_RLumCarlo","text":"object list class RLumCarlo_Model_Output: RLumCarlo simulation output object produced run_ functions verbose logical (default): enable/disable verbose mode ... input objects function arguments","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/methods_RLumCarlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"methods_RLumCarlo — methods_RLumCarlo","text":"summary(): function returns data.frame c(): function returns input objects","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/methods_RLumCarlo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"methods_RLumCarlo — methods_RLumCarlo","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany), Johannes Friedrich, University Bayreuth (Germany),","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/methods_RLumCarlo.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"methods_RLumCarlo — methods_RLumCarlo","text":"Kreutzer, S., Friedrich, J., 2025. methods_RLumCarlo(): methods_RLumCarlo. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/methods_RLumCarlo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"methods_RLumCarlo — methods_RLumCarlo","text":"","code":"##create object object <- run_MC_TL_DELOC(  s = 3.5e12,  E = 1.45,  R = 0.1,  method = 'seq',  clusters = 100,  times = 150:350)  ##summary summary(object) #>       time          mean             y_min              y_max        #>  Min.   :150   Min.   :0.00000   Min.   :0.000000   Min.   :0.0000   #>  1st Qu.:200   1st Qu.:0.03409   1st Qu.:0.004448   1st Qu.:0.1108   #>  Median :250   Median :0.22651   Median :0.111482   Median :0.4472   #>  Mean   :250   Mean   :0.98501   Mean   :0.704911   Mean   :1.3147   #>  3rd Qu.:300   3rd Qu.:1.56680   3rd Qu.:1.172210   3rd Qu.:2.1326   #>  Max.   :350   Max.   :4.25664   Max.   :3.374872   Max.   :5.5677   #>        sd                var                 sum          #>  Min.   :0.000000   Min.   :0.000e+00   Min.   :  0.000   #>  1st Qu.:0.001341   1st Qu.:1.798e-06   1st Qu.:  3.409   #>  Median :0.049623   Median :2.462e-03   Median : 22.651   #>  Mean   :0.117015   Mean   :3.561e-02   Mean   : 98.501   #>  3rd Qu.:0.188216   3rd Qu.:3.543e-02   3rd Qu.:156.680   #>  Max.   :0.508627   Max.   :2.587e-01   Max.   :425.664    ##combine c(objects,objects) #> [[1]] #> function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,  #>     pattern, sorted = TRUE)  #> { #>     if (!missing(name)) { #>         pos <- tryCatch(name, error = function(e) e) #>         if (inherits(pos, \"error\")) { #>             name <- substitute(name) #>             if (!is.character(name))  #>                 name <- deparse(name) #>             warning(gettextf(\"%s converted to character string\",  #>                 sQuote(name)), domain = NA) #>             pos <- name #>         } #>     } #>     all.names <- .Internal(ls(envir, all.names, sorted)) #>     if (!missing(pattern)) { #>         if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) &&  #>             ll != length(grep(\"]\", pattern, fixed = TRUE))) { #>             if (pattern == \"[\") { #>                 pattern <- \"\\\\[\" #>                 warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\") #>             } #>             else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) { #>                 pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern) #>                 warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\") #>             } #>         } #>         grep(pattern, all.names, value = TRUE) #>     } #>     else all.names #> } #> <bytecode: 0x140458c58> #> <environment: namespace:base> #>  #> [[2]] #> function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,  #>     pattern, sorted = TRUE)  #> { #>     if (!missing(name)) { #>         pos <- tryCatch(name, error = function(e) e) #>         if (inherits(pos, \"error\")) { #>             name <- substitute(name) #>             if (!is.character(name))  #>                 name <- deparse(name) #>             warning(gettextf(\"%s converted to character string\",  #>                 sQuote(name)), domain = NA) #>             pos <- name #>         } #>     } #>     all.names <- .Internal(ls(envir, all.names, sorted)) #>     if (!missing(pattern)) { #>         if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) &&  #>             ll != length(grep(\"]\", pattern, fixed = TRUE))) { #>             if (pattern == \"[\") { #>                 pattern <- \"\\\\[\" #>                 warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\") #>             } #>             else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) { #>                 pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern) #>                 warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\") #>             } #>         } #>         grep(pattern, all.names, value = TRUE) #>     } #>     else all.names #> } #> <bytecode: 0x140458c58> #> <environment: namespace:base> #>"},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"Visualise 'RLumCarlo' modelling results without extracting values manually. Typically visualised averaged signal number remaining electrons, polygon indicating modelling uncertainties.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"","code":"plot_RLumCarlo(   object,   plot_value = \"mean\",   plot_uncertainty = \"range\",   FUN = NULL,   norm = FALSE,   add = FALSE,   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"object list class RLumCarlo_Model_Output (required): input object plotted, usually required input object generated one functions starting run_. Alternatively list objects can provided. plot_value character (default): type curve value displayed. Allowed mean (default) sum (meaningful different systems combined). NULL disables value visualisation. plot_uncertainty character (default): type displayed uncertainty. Allowed values range, sd (standard deviation) var (variance). NULL disables uncertainty visualisation. FUN function (optional): function can applied y-values normalisation plotting norm logical (default): normalise curve highest intensity value add logical (default): allows overplotting results adding curves existing plot. argument handled automatically object type list ... argument, can passed control plot output largely following argument names graphics::plot.default. Currently supported : xlab, ylab, xlim, ylim, main, lwd, type, pch, lty,col, grid, legend. arguments lwd, type, pch, lty, col can provided vector object list","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"function returns graphical output visualisation modelling output.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"colouring curves, package khroma::khroma-package used provide colours can best distinguished, particular colour-blind users.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany) Johannes Friedrich, University Bayreuth (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"Kreutzer, S., Friedrich, J., 2025. plot_RLumCarlo(): Plot RLumCarlo Monte-Carlo Simulation Results. Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/plot_RLumCarlo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot RLumCarlo Monte-Carlo Simulation Results — plot_RLumCarlo","text":"","code":"## plain plot DELOC <- run_MC_TL_DELOC(   s = 3.5e12,   E = 1.45,   R = 0.1,   method = 'seq',   clusters = 100,   times = 150:350) %T>% plot_RLumCarlo(legend = TRUE)   ## TL with FUN to correct for thermal ## quenching f <- function(x) x * 1/(1 + (2e+6 * exp(-0.55/(8.617e-5 * (DELOC$time + 273))))) plot_RLumCarlo(  object = DELOC,  FUN = f)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"Runs Monte-Carlo (MC) simulation continuous wave infrared stimulated luminescence (CW-IRSL) using generalized one trap (GOT) model. Localized transitions refer transitions involve conduction valence band. transitions take place ground state excited state trapped charge, also involve energy state recombination centre.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"","code":"run_MC_CW_IRSL_LOC(   A,   times,   clusters = 10,   n_filled = 100,   r,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"numeric (required): optical excitation rate ground state trap excited state (s^-1) times numeric (required): sequence time steps within simulation (s) clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. r numeric (required): retrapping ratio localized transitions method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"model $$ I_{LOC}(t) = -dn/dt = * (n^2 / (r + n)) $$ function:  := optical excitation rate ground state excited state trap (s^-1)  r := retrapping ratio localized transitions  t := time (s) n := number filled electron traps","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"Kreutzer, S., 2025. run_MC_CW_IRSL_LOC(): Monte-Carlo Simulation CW-IRSL (localized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Chen, R., McKeever, S.W.S., 1997. Theory Thermoluminescence Related Phenomena. WORLD SCIENTIFIC. doi:10.1142/2781","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_LOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte-Carlo Simulation for CW-IRSL (localized transitions) — run_MC_CW_IRSL_LOC","text":"","code":"run_MC_CW_IRSL_LOC(  A = 0.12,  times = 0:100,  clusters = 50,  n_filled = 100,  r = 1e-7,  method = \"seq\",  output = \"signal\" ) %>% plot_RLumCarlo(legend = TRUE)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"Runs Monte-Carlo (MC) simulation continuous wave infrared stimulated luminescence (CW-IRSL) using model tunnelling transitions. Tunnelling refers quantum mechanical tunnelling processes excited state trap, recombination centre.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"","code":"run_MC_CW_IRSL_TUN(   A,   rho,   times,   clusters = 10,   r_c = 0,   delta.r = 0.1,   N_e = 200,   method = \"seq\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"numeric (required): effective optical excitation rate tunnelling process (s^-1). rho numeric (required): density recombination centres (defined \\(\\rho\\)' Huntley 2006) (dimensionless). times numeric (required): sequence time steps within simulation (s). clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. r_c numeric (default): Critical distance (>0) must provided sample thermally /optically pretreated. parameter expresses fact electron-hole pairs within critical radius r_c already recombined. delta.r numeric (default): Increments dimensionless distance parameter r' N_e numeric (width default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x length(r) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"model $$ I_{TUN}(r',t) = -dn/dt = * exp(-(\\rho')^{-1/3} * r')* n (r',t) $$ function:  := effective optical excitation rate tunnelling process (s^-1)  r' := dimensionless tunnelling radius  \\(\\rho\\)' := rho' dimensionless density recombination centres (see Huntley (2006))  t := time (s)  n := instantaneous number electrons corresponding radius r' time t","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"0.2.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"Friedrich, J., Kreutzer, S., 2025. run_MC_CW_IRSL_TUN(): Run Monte-Carlo Simulation CW-IRSL (tunnelling transitions). Function version 0.2.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"Huntley, D.J., 2006. explanation power-law decay luminescence. Journal Physics: Condensed Matter, 18(4), 1359. Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Aitken, M.J., 1985. Thermoluminescence dating. Academic Press. Jain, M., Guralnik, B., Andersen, M.T., 2012. Stimulated luminescence emission localized recombination randomly distributed defects. Journal Physics: Condensed Matter 24, 385402. Chen, R., McKeever, S.W.S., 1997. Theory Thermoluminescence Related Phenomena. WORLD SCIENTIFIC. doi:10.1142/2781","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"Johannes Friedrich, University Bayreuth (Germany), Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_IRSL_TUN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for CW-IRSL (tunnelling transitions) — run_MC_CW_IRSL_TUN","text":"","code":"run_MC_CW_IRSL_TUN(  A = 0.8,  rho = 1e-4,  times = 0:50,  r_c = 0.05,  delta.r = 0.1,  method = \"seq\",  clusters = 10,   output = \"signal\") %>%  plot_RLumCarlo(norm = TRUE, legend = TRUE)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"Runs Monte-Carlo (MC) simulation continuous wave optically stimulated luminescence (CW-OSL) using one trap one recombination centre (OTOR) model. term delocalized refers involvement conduction band.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"","code":"run_MC_CW_OSL_DELOC(   A,   times,   clusters = 10,   N_e = 200,   n_filled = N_e,   R,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"numeric (required): optical excitation rate trap conduction band (s^-1) times numeric (required): sequence temperature steps within simulation (s) clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. N_e integer (default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. R numeric (required): retrapping ratio delocalized transitions (dimensionless) method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): Output either 'signal' (default) 'remaining_e' (remaining charges, electrons, trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"model $$ I_{DELOC}(t) = -dn/dt = * (n^2 / (N*R + n(1-R))) $$ function:  t := time (s)  := optical excitation rate trap conduction band (1/s) n := n_filled, instantaneous number electrons  N := N_e available number electron traps available  R := retrapping ratio delocalized transitions","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"Kreutzer, S., 2025. run_MC_CW_OSL_DELOC(): Run Monte-Carlo Simulation CW-OSL (delocalized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Chen, R., McKeever, S.W.S., 1997. Theory Thermoluminescence Related Phenomena. WORLD SCIENTIFIC. doi:10.1142/2781","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_CW_OSL_DELOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for CW-OSL (delocalized transitions) — run_MC_CW_OSL_DELOC","text":"","code":"## brief example run_MC_CW_OSL_DELOC(  A = 0.12,  R = 0.1,  times = 0:10,  clusters = 10,  method = \"seq\") %>% plot_RLumCarlo(legend = TRUE)   ## A long example if (FALSE) { # \\dontrun{ A <- c(0.1,0.3,0.5,1) times <- seq(0, 60, 1) s <- 1e12 E <- 1 R <- c(1e-7, 1e-6, 0.01, 0.1) # sequence of different R values clusters <- 1000 # number of Monte Carlo simulations N_e <- c(200, 500, 700, 400) # number of free electrons n_filled <- c(200, 500, 100, 70) # number of filled traps method <-\"par\" output <- \"signal\" col <- c(1,2,3,4) # ifferent colours for the individual curves plot_uncertainty <- c(TRUE,FALSE,TRUE,FALSE)  # do you want to see the uncertainty? add_TF <- c(FALSE,rep(TRUE, (length(R)-1)))  ## loop to plot different curves into one plot for (u in 1:length(R)){  results <- run_MC_CW_OSL_DELOC(   A = A[u],   times,   clusters = clusters,   N_e = N_e[u],   n_filled = n_filled[u],   R = R[u],   method = method,   output = output)  plot_RLumCarlo( results,  add = add_TF[u],  legend = FALSE,  col = col[u],  main = \"Delocalised Transition\") } # add your legend with your parameters legend(\"topright\",   ncol = 4,   cex = 0.55,   title = \"parameters\",   legend=c(    paste0(\"A = \", A),    paste0(\"n_filled = \", n_filled),    paste0(\"N_e = \", N_e),    paste0(\"R = \", R)),    bty = \"n\",    text.col = col) } # }"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"Runs Monte-Carlo (MC) simulation isothermally stimulated luminescence (ISO-TL ITL) using one trap one recombination centre (OTOR) model. Delocalised refers involvement conduction band.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"","code":"run_MC_ISO_DELOC(   s,   E,   T = 20,   times,   clusters = 10,   N_e = 200,   n_filled = N_e,   R,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"s numeric (required): frequency factor trap (s^-1) E numeric (required): Thermal activation energy trap (eV) T numeric (default): Constant stimulation temperature (°C) times numeric (default): sequence time steps within simulation (s) clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. N_e integer (default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. R numeric (required): delocalized retrapping ratio (dimensionless) method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): Output either 'signal' (default) 'remaining_e' (remaining charges, electrons, trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"model $$ I_{DELOC}(t) = -dn/dt = (s * exp(-E/(k_{B} * T_{ISO}))) * (n^2 / (N*R + n(1-R))) $$ function:  t := time  \\(k_{B}\\) := Boltzmann constant (8.617 x 10^-5 eV K^-1)  \\(T_{ISO}\\) = temperature isothermal experiment (°C)  n := n_filled, number filled electron traps beginning simulation E := trap depth (eV)  s := frequency factor (s^-1)  N := N_e, total number electron traps available (dimensionless)  R := retrapping ratio delocalized transitions","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"Kreutzer, S., 2025. run_MC_ISO_DELOC(): Run Monte-Carlo Simulation ISO-TL (delocalized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Chen, R., McKeever, S.W.S., 1997. Theory Thermoluminescence Related Phenomena. WORLD SCIENTIFIC. doi:10.1142/2781","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_DELOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for ISO-TL (delocalized transitions) — run_MC_ISO_DELOC","text":"","code":"run_MC_ISO_DELOC(  s = 3.5e12,  E = 1.45,  T = 200,  R = 1,  method = 'seq',  times = 0:100) %>% plot_RLumCarlo(legend = TRUE)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"Runs Monte-Carlo (MC) simulation isothermally stimulated luminescence (ISO-TL ITL) using generalized one trap (GOT) model. Localized transitions refer transitions involve conduction valence band. transitions take place ground state excited state trapped charge, also involve energy state recombination centre.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"","code":"run_MC_ISO_LOC(   s,   E,   T = 20,   times,   clusters = 10,   n_filled = 100,   r,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"s numeric (required): frequency factor trap (s^-1) E numeric (required): Thermal activation energy trap (eV) T numeric (default): Constant stimulation temperature (°C) times numeric (default): sequence time steps within simulation (s) clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. r numeric (required): retrapping ratio localized transitions. method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"model $$ I_{LOC}(t) = -dn/dt = (s * exp(-E/(k_{B} * T_{ISO}))) * (n^2 / (r + n))) $$ function:  t := time (s)  \\(k_{B}\\) := Boltzmann constant (8.617 x 10^-5 eV K^-1) \\(T_{ISO}\\) := isothermal temperature (°C)  n := n_filled  s := frequency factor trap (1/s)  E := activation energy trap (eV)  r := retrapping ratio localized transitions","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"Kreutzer, S., 2025. run_MC_ISO_LOC(): Run Monte-Carlo simulation ISO-TL (localized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_LOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo simulation for ISO-TL (localized transitions) — run_MC_ISO_LOC","text":"","code":"run_MC_ISO_LOC(  E = 1.45,  s = 3.5e12,  T = 200,  times = 0:100,  method = 'seq',  r = 1) %>% plot_RLumCarlo(legend = TRUE)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"Runs Monte-Carlo (MC) simulation isothermally stimulated luminescence (ISO-TL ITL) using tunnelling (TUN) model. Tunnelling refers quantum mechanical tunnelling processes excited state trapped charge, recombination centre.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"","code":"run_MC_ISO_TUN(   E,   s,   T = 200,   rho,   times,   clusters = 10,   r_c = 0,   delta.r = 0.1,   N_e = 200,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"E numeric (required): Thermal activation energy trap (eV). s numeric (required): effective frequency factor tunnelling process (s^-1). T numeric (default): Constant stimulation temperature (°C). rho numeric (required): dimensionless density recombination centres (defined \\(\\rho\\)' Huntley 2006) (dimensionless). times numeric (required): sequence time steps within simulation (s). clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. r_c numeric (default): Critical distance (>0) must provided sample thermally /optically pretreated. parameter expresses fact electron-hole pairs within critical radius r_c already recombined. delta.r numeric (default): Fractional change dimensionless distance nearest recombination centres (r') N_e numeric (width default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x length(r) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"model $$ I_{TUN}(r',t) = -dn/dt = (s * exp(-E/(k_{B}*T_{ISO}))) * exp(-(\\rho')^{-1/3} * r') * n (r',t) $$ function:  E := thermal activation energy (eV)  s := effective frequency factor tunnelling process (s^-1)  \\(T_{ISO}\\) := temperature isothermal experiment (°C) \\(k_{B}\\) := Boltzmann constant (8.617 x 10^-5 eV K^-1) r' := dimensionless tunnelling radius  \\(\\rho\\)' := rho dimensionless density recombination centres see Huntley (2006)  t := time (s)  n := instantaneous number electrons corresponding radius r'","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"Friedrich, J., Kreutzer, S., 2025. run_MC_ISO_TUN(): Monte-Carlo Simulation ISO-TL (tunnelling transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"Pagonis, V. Kulp, C., 2017. Monte Carlo simulations tunneling phenomena nearest neighbor hopping mechanism feldspars. Journal Luminescence 181, 114–120. doi:10.1016/j.jlumin.2016.09.014 reading Aitken, M.J., 1985. Thermoluminescence dating. Academic Press. Huntley, D.J., 2006. explanation power-law decay luminescence. Journal Physics: Condensed Matter, 18(4), 1359. Jain, M., Guralnik, B., Andersen, M.T., 2012. Stimulated luminescence emission localized recombination randomly distributed defects. Journal Physics: Condensed Matter 24, 385402. Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"Johannes Friedrich, University Bayreuth (Germany), Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_ISO_TUN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte-Carlo Simulation for ISO-TL (tunnelling transitions) — run_MC_ISO_TUN","text":"","code":"## short example run_MC_ISO_TUN(  E = .8,  s = 1e16,  T = 50,  rho = 1e-4,  times = 0:100,  clusters = 10,  N_e = 100,  r_c = 0.2,  delta.r = 0.5,  method = \"seq\") %>%  plot_RLumCarlo(legend = TRUE)   if (FALSE) { # \\dontrun{ ## long (meaningful) example results <- run_MC_ISO_TUN(  E = .8,  s = 1e16,  T = 50,  rho = 1e-4,  times = 0:100,  clusters = 1000,  N_e = 200,  r_c = 0.1,  delta.r = 0.05,  method = \"par\")  plot_RLumCarlo(results, legend = TRUE) } # }"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"Runs Monte-Carlo (MC) simulation linearly modulated optically stimulated luminescence (LM-OSL) using one trap one recombination centre (OTOR) model. Delocalised refers involvement conduction band.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"","code":"run_MC_LM_OSL_DELOC(   A,   times,   clusters = 10,   N_e = 200,   n_filled = N_e,   R,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"numeric (required): optical excitation rate trap conduction band (s^-1) times numeric (required): sequence time steps within simulation (s) clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. N_e integer (default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. R numeric (required): retrapping ratio delocalized transitions method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"model $$ I_{DELOC}(t) = -dn/dt = * t/P * (n^2 / (N*R + n(1-R))) $$ function:  t := time (s)  := optical excitation rate trap conduction band (1/s) n := n_filled, instantaneous number electrons  R :=  retrapping ratio delocalized transitions  N := N_e, total number electron traps available (dimensionless)  P := total stimulation time (s)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"Kreutzer, S., 2025. run_MC_LM_OSL_DELOC(): Run Monte-Carlo Simulation LM-OSL (delocalized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Chen, R., McKeever, S.W.S., 1997. Theory Thermoluminescence Related Phenomena. WORLD SCIENTIFIC. doi:10.1142/2781","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_DELOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for LM-OSL (delocalized transitions) — run_MC_LM_OSL_DELOC","text":"","code":"run_MC_LM_OSL_DELOC(  A = 0.12,  R = 0.1,  times = 0:50,  method = \"seq\",  clusters = 10) %>% plot_RLumCarlo(legend = TRUE)"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"Runs Monte-Carlo (MC) simulation linearly modulated optically stimulated luminescence (LM-OSL) using generalized one trap (GOT) model. Localized transitions refer transitions involve conduction valence band. transitions take place ground state excited state trap, also involve energy state recombination centre.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"","code":"run_MC_LM_OSL_LOC(   A,   times,   clusters = 10,   n_filled = 100,   r,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"numeric (required): optical excitation rate ground state excited state trap (s^-1) times numeric (required): sequence time steps within simulation (s) clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. r numeric (required): retrapping ratio localized transitions method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges, electrons, trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"model $$ I_{LOC}(t) = -dn/dt = (* t/P) * (n^2 / (r + n)) $$ function:  := optical excitation rate ground state excited state trap (1/s) P := total excitation time (s)  t := time (s)  n := n_filled, instantaneous number electrons  r := retrapping ratio localized transitions","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"Kreutzer, S., 2025. run_MC_LM_OSL_LOC(): Run Monte-Carlo Simulation LM-OSL (localized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_LOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for LM-OSL (localized transitions) — run_MC_LM_OSL_LOC","text":"","code":"## short example run_MC_LM_OSL_LOC(  A = 1,  times = 0:40,  clusters = 10,  n_filled = 100,  r = 1e-7,  method = \"seq\",  output = \"signal\") %>% plot_RLumCarlo(legend = TRUE)   if (FALSE) { # \\dontrun{ ## the long (meaningful) example results <- run_MC_LM_OSL_LOC(  A = 1,  times = 0:100,  clusters = 100,  n_filled = 100,  r = 1e-7,  method = \"par\",  output = \"signal\")  ## plot plot_RLumCarlo(results, legend = TRUE) } # }"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"Runs Monte-Carlo (MC) simulation linearly modulated optically stimulated luminescence (LM-OSL) using tunnelling (TUN) model. Tunnelling refers quantum mechanical tunnelling processes excited state trapped charge, recombination centre.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"","code":"run_MC_LM_OSL_TUN(   A,   rho,   times,   clusters = 10,   r_c = 0,   delta.r = 0.1,   N_e = 200,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"numeric (required): effective optical excitation rate tunnelling process rho numeric (required): dimensionless density recombination centres (defined \\(\\rho\\)' Huntley 2006) (dimensionless) times numeric (required): sequence time steps within simulation (s) clusters numeric (default): number MC runs r_c numeric (default): Critical distance (>0) used sample 1 thermally /optically pretreated. parameter expresses fact electron-hole pairs within critical radius r_c already recombined. delta.r numeric (default): Increments dimensionless distance r' N_e numeric (width default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges, electrons, trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x length(r) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"model $$ I_{TUN}(r',t) = -dn/dt = (* t/P) * exp(-(\\rho')^{-1/3} * r') * n(r',t) $$ function:  := optical excitation rate tunnelling process (s^-1) t := time (s)  P := maximum stimulation time (s)  r' := dimensionless tunnelling radius  \\(\\rho\\) := rho dimensionless density recombination centres see Huntley (2006)  n := instantaneous number electrons corresponding radius r'","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"Friedrich, J., Kreutzer, S., 2025. run_MC_LM_OSL_TUN(): Run Monte-Carlo Simulation LM-OSL (tunnelling transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"Huntley, D.J., 2006. explanation power-law decay luminescence. Journal Physics: Condensed Matter, 18(4), 1359. Pagonis, V. Kulp, C., 2017. Monte Carlo simulations tunneling phenomena nearest neighbor hopping mechanism feldspars. Journal Luminescence 181, 114–120. doi:10.1016/j.jlumin.2016.09.014 Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Aitken, M.J., 1985. Thermoluminescence dating. Academic Press. Jain, M., Guralnik, B., Andersen, M.T., 2012. Stimulated luminescence emission localized recombination randomly distributed defects. Journal Physics: Condensed Matter 24, 385402.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"Johannes Friedrich, University Bayreuth (Germany), Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_LM_OSL_TUN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for LM-OSL (tunnelling transitions) — run_MC_LM_OSL_TUN","text":"","code":"##the short example run_MC_LM_OSL_TUN(  A = 1,  rho = 1e-3,  times = 0:100,  clusters = 10,  N_e = 100,  r_c = 0.1,  delta.r = 1e-1,  method = \"seq\",  output = \"signal\") %>% plot_RLumCarlo(norm = TRUE)   if (FALSE) { # \\dontrun{ ## the long (meaningful) example results <- run_MC_LM_OSL_TUN(  A = 1,  rho = 1e-3,  times = 0:1000,  clusters = 30,  N_e = 100,  r_c = 0.1,  delta.r = 1e-1,  method = \"par\",  output = \"signal\")  plot_RLumCarlo(results, norm = TRUE) } # }"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"Runs Monte-Carlo (MC) simulation thermoluminescence (TL) using one trap one recombination centre (OTOR) model. Delocalised refers involvement conduction band. heating rate function assumed 1 K/s.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"","code":"run_MC_TL_DELOC(   s,   E,   times,   b = 1,   clusters = 10,   N_e = 200,   n_filled = N_e,   R = 1,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"s numeric (required): frequency factor trap (s^-1) E numeric (required): Thermal activation energy trap (eV) times numeric (required): sequence temperature steps within simulation (s). default heating rate set 1 K/s. final temperature max(times) * b b numeric (default): heating rate K/s clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. N_e integer (default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. R numeric (default): Re-trapping ratio delocalized transitions method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"model $$ I_{DELOC}(t) = -dn/dt = (s*exp(-E/(k_{B}*T))) * (n^2 / (N * R + n(1-R)))) $$ function:  E := thermal activation energy (eV)  s := frequency factor (s^-1)  t := time (s)  \\(k_{B}\\) := Boltzmann constant (8.617 x 10^-5 eV K^-1) T := temperature (°C)  R := Delocalised retrapping ratio n := n_filled, instantaneous number electrons  N := N_e, total number electron traps available (dimensionless) times b instead temperature? parameter control temperature function stimulation times (parameter times) heating rate (b). Thus, final temperature max(times) * b. heating rate (b = 1) final temperature max(times). might little bit confusing, also allows control time resolution simulation, .e. can simulate points per second.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"Kreutzer, S., 2025. run_MC_TL_DELOC(): Run Monte-Carlo Simulation TL (delocalized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Chen, R., McKeever, S.W.S., 1997. Theory Thermoluminescence Related Phenomena. WORLD SCIENTIFIC. doi:10.1142/2781","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_DELOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for TL (delocalized transitions) — run_MC_TL_DELOC","text":"","code":"## the short example run_MC_TL_DELOC(  s = 3.5e12,  E = 1.45,  R = 0.1,  method = 'seq',  clusters = 100,  times = 150:350) %>% plot_RLumCarlo(legend = TRUE)   if (FALSE) { # \\dontrun{ ## the long (meaningful) example # define your parameters times <- seq(100, 450, 1) s <- rep(3.5e12, 4) E <- rep(1.45, 4) R <- c(0.7e-6, 1e-6, 0.01, 0.1) clusters <- 300 N_e <- c(400, 500, 700, 400) n_filled <- c(400, 500, 300, 70) method <- \"par\" output <- \"signal\" col <- c(1, 2, 3, 4) # different colours for the individual curves plot_uncertainty <- c(TRUE, TRUE, TRUE, TRUE)  # do you want to see the uncertainty? add_TF <- c(FALSE, rep(TRUE, (length(R) - 1)))  # loop to plot different curves into one plot for (u in 1:length(R)){  results <- run_MC_TL_DELOC(   times=times,   s = s[u],   E = E[u],   clusters = clusters,   N_e = N_e[u],   n_filled = n_filled[u],   R = R[u],   method = method,   output = output)  plot_RLumCarlo(  results,  add = add_TF[u],  legend = FALSE,  col=col[u],  main = \" your plot\",  ylim=c(0,20)) } #add your legend with your parameters legend(\"topright\",   ncol = 5,   cex = 0.55,   bty = \"n\",   title = \"parameters\",   legend = c(    paste0(\"E = \", E),    paste0(\"s = \", s),    paste0(\"n_filled = \", n_filled),    paste0(\"N_e = \", N_e), paste0(\"R = \", R)),    text.col = col) } # }"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"Runs Monte-Carlo (MC) simulation thermoluminescence (TL) using generalized one trap (GOT) model. Localized transitions refer transitions involve conduction valence band. transitions take place ground state excited state trapped charge, also involve energy state recombination centre. heating rate function assumed 1 K/s.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"","code":"run_MC_TL_LOC(   s,   E,   times,   b = 1,   clusters = 10,   n_filled = 100,   r,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"s numeric (required): frequency factor trap (s^-1) E numeric (required): Thermal activation energy trap (eV) times numeric (required): sequence temperature steps within simulation (s). default heating rate set 1 K/s. final temperature max(times) * b b numeric (default): heating rate K/s clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. n_filled integer (default): number filled electron traps beginning simulation (dimensionless). Can vector length(clusters), shorter values recycled. r numeric (required): localized retrapping ratio (dimensionless) method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"model $$ I_{LOC}(t) = -dn/dt = (s * exp(-E/(k_{B} * T))) * (n^2 / (r + n)) $$ function:  E := thermal activation energy (eV)  s := frequency factor trap (s^-1)  t := time (s)  \\(k_{B}\\) := Boltzmann constant (8.617 x 10^-5 eV K^-1) T := temperature (°C)  n := instantaneous number electrons  r := retrapping ratio localized transitions","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"Kreutzer, S., 2025. run_MC_TL_LOC(): Run Monte-Carlo Simulation TL (localized transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"Sebastian Kreutzer, Institute Geography, Heidelberg University (Germany)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_LOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for TL (localized transitions) — run_MC_TL_LOC","text":"","code":"## the short example run_MC_TL_LOC(  s = 1e14,  E = 0.9,  times = 50:100,  b = 1,  method = \"seq\",  clusters = 30,  r = 1) %>% plot_RLumCarlo()   if (FALSE) { # \\dontrun{ ## the long (meaningful) example results <- run_MC_TL_LOC(  s = 1e14,  E = 0.9,  times = 50:100,  method = \"par\",  clusters = 100,  r = 1)  ## plot plot_RLumCarlo(results)  } # }"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"Runs Monte-Carlo (MC) simulation thermoluminescence (TL) caused tunnelling (TUN) transitions. Tunnelling refers quantum mechanical tunnelling processes excited state trap recombination centre. heating rate function assumed 1 K/s.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"","code":"run_MC_TL_TUN(   s,   E,   rho,   r_c = 0,   times,   b = 1,   clusters = 10,   N_e = 200,   delta.r = 0.1,   method = \"par\",   output = \"signal\",   ... )"},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"s list (required): effective frequency factor tunnelling process (s^-1) E numeric (required): Thermal activation energy trap (eV) rho numeric (required): dimensionless density recombination centres (defined \\(\\rho\\)' Huntley 2006) r_c numeric (default): Critical distance (>0) used sample thermally /optically pretreated. parameter expresses fact electron-hole pairs within critical radius r_c already recombined. times numeric (required): sequence temperature steps within simulation (s). default heating rate set 1 K/s. final temperature max(times) * b b numeric (default): heating rate K/s clusters numeric (default): number created clusters MC runs. input can output create_ClusterSystem. case n_filled indicate absolute numbers system. N_e numeric (default): total number electron traps available (dimensionless). Can vector length(clusters), shorter values recycled. delta.r numeric (default): increments dimensionless distance r' method character (default): Sequential 'seq' parallel 'par'processing. parallel mode function tries run simulation multiple CPU cores (available) positive effect computation time. output character (default): output either 'signal' (default) 'remaining_e' (remaining charges/electrons trap) ... arguments, cores control number used CPU cores verbose silence terminal","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"function returns object class RLumCarlo_Model_Output list consisting array dimension length(times) x length(r) x clusters numeric time vector.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"model $$ I_{TUN}(r',t) = -dn/dt = (s * exp(-E/(k_{B} * T))) * exp(-(\\rho')^{-1/3} * r') * n(r',t) $$ function:  s := frequency tunnelling process (s^-1)  E := thermal activation energy (eV)  \\(k_{B}\\) := Boltzmann constant (8.617 x 10^-5 eV K^-1) T := temperature (°C) r' := dimensionless tunnelling radius  \\(\\rho\\)' := rho', dimensionless density recombination centres (see Huntley (2006))  t := time (s)  n := instantaneous number electrons distance r'","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"function-version","dir":"Reference","previous_headings":"","what":"Function version","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"0.1.0","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"how-to-cite","dir":"Reference","previous_headings":"","what":"How to cite","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"Friedrich, J., Kreutzer, S., 2025. run_MC_TL_TUN(): Run Monte-Carlo Simulation TL (tunnelling transitions). Function version 0.1.0. : Friedrich, J., Kreutzer, S., Pagonis, V., Schmidt, C., 2025. RLumCarlo: Monte-Carlo Methods Simulating Luminescence Phenomena. R package version 0.1.10. https://r-lum.github.io/RLumCarlo/","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"Huntley, D.J., 2006. explanation power-law decay luminescence. Journal Physics: Condensed Matter, 18(4), 1359. Pagonis, V. Kulp, C., 2017. Monte Carlo simulations tunneling phenomena nearest neighbor hopping mechanism feldspars. Journal Luminescence 181, 114–120. doi:10.1016/j.jlumin.2016.09.014 Pagonis, V., Friedrich, J., Discher, M., Müller-Kirschbaum, ., Schlosser, V., Kreutzer, S., Chen, R. Schmidt, C., 2019. Excited state luminescence signals random distribution defects: new Monte Carlo simulation approach feldspar. Journal Luminescence 207, 266–272. doi:10.1016/j.jlumin.2018.11.024 reading Aitken, M.J., 1985. Thermoluminescence dating. Academic Press. Jain, M., Guralnik, B., Andersen, M.T., 2012. Stimulated luminescence emission localized recombination randomly distributed defects. Journal Physics: Condensed Matter 24, 385402.","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"Johannes Friedrich, University Bayreuth (Germany), Sebastian Kreutzer, Geography & Earth Sciences, Aberystwyth University (United Kingdom)","code":""},{"path":"https://r-lum.github.io/RLumCarlo/reference/run_MC_TL_TUN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Monte-Carlo Simulation for TL (tunnelling transitions) — run_MC_TL_TUN","text":"","code":"## the short example run_MC_TL_TUN(  s = 1e12,  E = 0.9,  rho = 1,  r_c = 0.1,  times = 80:120,  b = 1,  clusters = 50,  method = 'seq',  delta.r = 1e-1) %>% plot_RLumCarlo()   if (FALSE) { # \\dontrun{ ## the long (meaningful example) results <- run_MC_TL_TUN(  s = 1e12,  E = 0.9,  rho = 0.01,  r_c = 0.1,  times = 80:220,  clusters = 100,  method = 'par',  delta.r = 1e-1)  ## plot plot_RLumCarlo(results) } # }"},{"path":"https://r-lum.github.io/RLumCarlo/news/index.html","id":"rlumcarlo-0110-2025-09-19","dir":"Changelog","previous_headings":"","what":"RLumCarlo 0.1.10 (2025-09-19)","title":"RLumCarlo 0.1.10 (2025-09-19)","text":"Internal: Change standard C++11 C++17 requested CRAN","code":""}]
